// <auto-generated />
using System;
using GenshinWebApp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace GenshinWebApp.Migrations
{
    [DbContext(typeof(GenshinImpactContext))]
    [Migration("20211119170349_NewScaling")]
    partial class NewScaling
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "English_South Africa.1252")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("GenshinWebApp.Models.Ability", b =>
                {
                    b.Property<int>("AbilityId")
                        .HasColumnType("integer")
                        .HasColumnName("ability_id");

                    b.Property<string>("AbilityName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ability_name");

                    b.Property<int?>("Cooldown")
                        .HasColumnType("integer")
                        .HasColumnName("cooldown");

                    b.Property<int?>("EnergyCost")
                        .HasColumnType("integer")
                        .HasColumnName("energy_cost");

                    b.HasKey("AbilityId");

                    b.ToTable("ability");
                });

            modelBuilder.Entity("GenshinWebApp.Models.AbilityDamage", b =>
                {
                    b.Property<int>("AbilityDamageId")
                        .HasColumnType("integer")
                        .HasColumnName("ability_damage_id");

                    b.Property<int?>("AbilityDamageInstanceId")
                        .HasColumnType("integer")
                        .HasColumnName("ability_damage_instance_id");

                    b.Property<int?>("AbilityId")
                        .HasColumnType("integer")
                        .HasColumnName("ability_id");

                    b.HasIndex("AbilityDamageInstanceId");

                    b.HasIndex("AbilityId");

                    b.ToTable("ability_damage");
                });

            modelBuilder.Entity("GenshinWebApp.Models.AbilityDamageInstance", b =>
                {
                    b.Property<int>("AbilityDamageInstanceId")
                        .HasColumnType("integer")
                        .HasColumnName("ability_damage_instance_id");

                    b.Property<string>("DamageInstanceName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("damage_instance_name");

                    b.Property<int>("ScalingId")
                        .HasColumnType("integer")
                        .HasColumnName("scaling_id");

                    b.HasKey("AbilityDamageInstanceId");

                    b.HasIndex("ScalingId");

                    b.ToTable("ability_damage_instance");
                });

            modelBuilder.Entity("GenshinWebApp.Models.AbilityScaling", b =>
                {
                    b.Property<int>("ScalingId")
                        .HasColumnType("integer")
                        .HasColumnName("scaling_id");

                    b.Property<string>("DamageType")
                        .HasColumnType("text")
                        .HasColumnName("damage_type");

                    b.Property<decimal>("Level1")
                        .HasColumnType("numeric")
                        .HasColumnName("level_1");

                    b.Property<decimal>("Level10")
                        .HasColumnType("numeric")
                        .HasColumnName("level_10");

                    b.Property<decimal>("Level11")
                        .HasColumnType("numeric")
                        .HasColumnName("level_11");

                    b.Property<decimal>("Level12")
                        .HasColumnType("numeric")
                        .HasColumnName("level_12");

                    b.Property<decimal>("Level13")
                        .HasColumnType("numeric")
                        .HasColumnName("level_13");

                    b.Property<decimal>("Level14")
                        .HasColumnType("numeric")
                        .HasColumnName("level_14");

                    b.Property<decimal>("Level15")
                        .HasColumnType("numeric")
                        .HasColumnName("level_15");

                    b.Property<decimal>("Level2")
                        .HasColumnType("numeric")
                        .HasColumnName("level_2");

                    b.Property<decimal>("Level3")
                        .HasColumnType("numeric")
                        .HasColumnName("level_3");

                    b.Property<decimal>("Level4")
                        .HasColumnType("numeric")
                        .HasColumnName("level_4");

                    b.Property<decimal>("Level5")
                        .HasColumnType("numeric")
                        .HasColumnName("level_5");

                    b.Property<decimal>("Level6")
                        .HasColumnType("numeric")
                        .HasColumnName("level_6");

                    b.Property<decimal>("Level7")
                        .HasColumnType("numeric")
                        .HasColumnName("level_7");

                    b.Property<decimal>("Level8")
                        .HasColumnType("numeric")
                        .HasColumnName("level_8");

                    b.Property<decimal>("Level9")
                        .HasColumnType("numeric")
                        .HasColumnName("level_9");

                    b.HasKey("ScalingId")
                        .HasName("ability_scaling_pkey");

                    b.ToTable("ability_scaling");
                });

            modelBuilder.Entity("GenshinWebApp.Models.AbilityScalingValue", b =>
                {
                    b.Property<int>("ScalingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Scaling>("Scaling")
                        .HasColumnType("jsonb");

                    b.HasKey("ScalingId");

                    b.ToTable("ability_scaling_value");
                });

            modelBuilder.Entity("GenshinWebApp.Models.Amber", b =>
                {
                    b.Property<int?>("AbilityDamageInstanceId")
                        .HasColumnType("integer")
                        .HasColumnName("ability_damage_instance_id");

                    b.Property<int?>("AbilityId")
                        .HasColumnType("integer")
                        .HasColumnName("ability_id");

                    b.Property<int?>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<string>("CharacterName")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)")
                        .HasColumnName("character_name");

                    b.Property<decimal?>("Level1")
                        .HasColumnType("numeric")
                        .HasColumnName("level_1");

                    b.Property<decimal?>("Level10")
                        .HasColumnType("numeric")
                        .HasColumnName("level_10");

                    b.Property<decimal?>("Level11")
                        .HasColumnType("numeric")
                        .HasColumnName("level_11");

                    b.Property<decimal?>("Level12")
                        .HasColumnType("numeric")
                        .HasColumnName("level_12");

                    b.Property<decimal?>("Level13")
                        .HasColumnType("numeric")
                        .HasColumnName("level_13");

                    b.Property<decimal?>("Level14")
                        .HasColumnType("numeric")
                        .HasColumnName("level_14");

                    b.Property<decimal?>("Level15")
                        .HasColumnType("numeric")
                        .HasColumnName("level_15");

                    b.Property<decimal?>("Level2")
                        .HasColumnType("numeric")
                        .HasColumnName("level_2");

                    b.Property<decimal?>("Level3")
                        .HasColumnType("numeric")
                        .HasColumnName("level_3");

                    b.Property<decimal?>("Level4")
                        .HasColumnType("numeric")
                        .HasColumnName("level_4");

                    b.Property<decimal?>("Level5")
                        .HasColumnType("numeric")
                        .HasColumnName("level_5");

                    b.Property<decimal?>("Level6")
                        .HasColumnType("numeric")
                        .HasColumnName("level_6");

                    b.Property<decimal?>("Level7")
                        .HasColumnType("numeric")
                        .HasColumnName("level_7");

                    b.Property<decimal?>("Level8")
                        .HasColumnType("numeric")
                        .HasColumnName("level_8");

                    b.Property<decimal?>("Level9")
                        .HasColumnType("numeric")
                        .HasColumnName("level_9");

                    b.Property<int?>("ScalingId")
                        .HasColumnType("integer")
                        .HasColumnName("scaling_id");

                    b.ToTable("amber");
                });

            modelBuilder.Entity("GenshinWebApp.Models.Character", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<string>("CharacterName")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)")
                        .HasColumnName("character_name");

                    b.Property<int>("ElementId")
                        .HasColumnType("integer")
                        .HasColumnName("element_id");

                    b.Property<int>("RarityId")
                        .HasColumnType("integer")
                        .HasColumnName("rarity_id");

                    b.Property<int>("WeaponTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("weapon_type_id");

                    b.HasKey("CharacterId");

                    b.HasIndex("ElementId");

                    b.HasIndex("RarityId");

                    b.HasIndex("WeaponTypeId");

                    b.ToTable("character");
                });

            modelBuilder.Entity("GenshinWebApp.Models.CharacterAbility", b =>
                {
                    b.Property<int?>("AbilityId")
                        .HasColumnType("integer")
                        .HasColumnName("ability_id");

                    b.Property<int>("CharacterAbilityId")
                        .HasColumnType("integer")
                        .HasColumnName("character_ability_id");

                    b.Property<int?>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.HasIndex("AbilityId");

                    b.HasIndex("CharacterId");

                    b.ToTable("character_ability");
                });

            modelBuilder.Entity("GenshinWebApp.Models.Element", b =>
                {
                    b.Property<int>("ElementId")
                        .HasColumnType("integer")
                        .HasColumnName("element_id");

                    b.Property<string>("ElementName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("element_name");

                    b.HasKey("ElementId");

                    b.ToTable("elements");
                });

            modelBuilder.Entity("GenshinWebApp.Models.Rarity", b =>
                {
                    b.Property<int>("RarityId")
                        .HasColumnType("integer")
                        .HasColumnName("rarity_id");

                    b.Property<string>("RarityName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("rarity_name");

                    b.HasKey("RarityId");

                    b.ToTable("rarity");
                });

            modelBuilder.Entity("GenshinWebApp.Models.WeaponType", b =>
                {
                    b.Property<int>("WeaponTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("weapon_type_id");

                    b.Property<string>("WeaponTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("weapon_type_name");

                    b.HasKey("WeaponTypeId");

                    b.ToTable("weapon_type");
                });

            modelBuilder.Entity("GenshinWebApp.Models.AbilityDamage", b =>
                {
                    b.HasOne("GenshinWebApp.Models.AbilityDamageInstance", "AbilityDamageInstance")
                        .WithMany()
                        .HasForeignKey("AbilityDamageInstanceId")
                        .HasConstraintName("fk_ability_damage_instance_id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("GenshinWebApp.Models.Ability", "Ability")
                        .WithMany()
                        .HasForeignKey("AbilityId")
                        .HasConstraintName("fk_ability_id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Ability");

                    b.Navigation("AbilityDamageInstance");
                });

            modelBuilder.Entity("GenshinWebApp.Models.AbilityDamageInstance", b =>
                {
                    b.HasOne("GenshinWebApp.Models.AbilityScaling", "Scaling")
                        .WithMany()
                        .HasForeignKey("ScalingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scaling");
                });

            modelBuilder.Entity("GenshinWebApp.Models.Character", b =>
                {
                    b.HasOne("GenshinWebApp.Models.Element", "Element")
                        .WithMany()
                        .HasForeignKey("ElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenshinWebApp.Models.Rarity", "Rarity")
                        .WithMany()
                        .HasForeignKey("RarityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GenshinWebApp.Models.WeaponType", "WeaponType")
                        .WithMany()
                        .HasForeignKey("WeaponTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Element");

                    b.Navigation("Rarity");

                    b.Navigation("WeaponType");
                });

            modelBuilder.Entity("GenshinWebApp.Models.CharacterAbility", b =>
                {
                    b.HasOne("GenshinWebApp.Models.Ability", "Ability")
                        .WithMany()
                        .HasForeignKey("AbilityId")
                        .HasConstraintName("fk_ability_id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("GenshinWebApp.Models.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .HasConstraintName("fk_character_id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Ability");

                    b.Navigation("Character");
                });
#pragma warning restore 612, 618
        }
    }
}
